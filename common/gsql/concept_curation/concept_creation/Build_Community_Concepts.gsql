CREATE DISTRIBUTED QUERY Build_Community_Concepts (SET<STRING> v_type_set, SET<STRING> e_type_set, INT min_comm_size, INT max_comm_size)  SYNTAX V1 {
MinAccum<INT> @min_cc_id = 0;       //each vertex's tentative component id
MapAccum<INT, INT> @@comp_sizes_map;
MapAccum<INT, ListAccum<INT>> @@comp_group_by_size_map;
SumAccum<INT> @@num_concepts_created;

Start = {v_type_set};

# Initialize: Label each vertex with its own internal ID
S = SELECT x 
    FROM Start:x
    POST-ACCUM x.@min_cc_id = getvid(x);

# Propagate smaller internal IDs until no more ID changes can be Done
WHILE (S.size()>0) DO
    S = SELECT t
        FROM S:s -(e_type_set:e)- v_type_set:t
	ACCUM t.@min_cc_id += s.@min_cc_id // If s has smaller id than t, copy the id to t
	HAVING t.@min_cc_id != t.@min_cc_id';
END;

Start = {v_type_set};
Start = SELECT s 
        FROM Start:s
	      POST-ACCUM 
	        @@comp_sizes_map += (s.@min_cc_id -> 1);
  
FOREACH (compId,size) IN @@comp_sizes_map DO
  IF size >= min_comm_size AND size <= max_comm_size THEN
      @@num_concepts_created += 1;
      v = SELECT s FROM Start:s WHERE s.@min_cc_id == compId
          POST-ACCUM
            IF s.type == "Relationship" THEN
              INSERT INTO Concept VALUES("InCommunity"+to_string(compId), _, _, "COMMUNITY_LEAF", now(), FALSE),
              INSERT INTO DESCRIBES_RELATIONSHIP VALUES("InCommunity"+to_string(compId), s)
            ELSE IF s.type == "Entity" THEN
              INSERT INTO Concept VALUES("InCommunity"+to_string(compId), _, _, "COMMUNITY_LEAF", now(), FALSE),
              INSERT INTO DESCRIBES_ENTITY VALUES("InCommunity"+to_string(compId), s)
            ELSE IF s.type == "Concept" THEN
              INSERT INTO Concept VALUES("InCommunity"+to_string(compId), _, _, "AND", now(), FALSE),
              INSERT INTO IS_CHILD_OF VALUES(s, "InCommunity"+to_string(compId))
            END;
  END;
END;

PRINT @@num_concepts_created;
}